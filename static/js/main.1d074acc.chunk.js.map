{"version":3,"sources":["utils/TextManipulator.ts","utils/EncoderUtility.ts","components/Error.tsx","components/Encoder.tsx","utils/DecoderUtility.ts","components/Decoder.tsx","components/SecretLorem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isImportantWord","v","i","stringToBinary","str","replace","addZeroPad","convertUnicodeCharacterToBinary","charCodeAt","toString","c","words","map","w","everyVowelInWord","word","split","filter","isVowel","join","text","num","count","repeat","slice","String","length","lookUp","key","Math","floor","random","this","seed","TextManipulator","flat","message","vowelList","convertMessageToVowelString","leftDataPad","CountEncodingSpace","skipCount","shift","a","tb","Error","error","Encoder","props","updateSeededLorem","e","setState","seededLorem","target","value","convert","updateSecretMessage","secretMessage","state","codedMessage","EncoderUtility","EncodeMessage","changeCodeCallback","className","onChange","React","Component","o","u","filterToImportantWords","vowels","everyVowelInWords","ConvertVowelPairingsToBinary","stringsOfVowels","twoBitList","decode","f","byteList","s","b","fromCharCode","parseInt","Decoder","DecoderUtility","DecodeMessage","SecretLorem","updateCodedMessage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"4OAoCe,M,4DApBXA,gBAAkB,SAACC,EAAWC,GAAZ,OAAmC,G,KAOrDC,eAAiB,SAACC,GAAD,OACbA,EAAIC,QAAQ,WAAW,SAAAD,GAAG,OAAI,EAAKE,WAC/B,EAAKC,gCAAgCH,GAAM,GAC3C,Q,KAERG,gCAAkC,SAACH,GAAD,OAAiBA,EAAII,WAAW,GAAGC,SAAS,I,oDA1BtEC,GACJ,MAAa,MAANA,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,I,wCAG7CC,GAA4B,IAAD,OACzC,OAAOA,EAAMC,KAAI,SAAAC,GAAC,OAAI,EAAKC,iBAAiBD,Q,uCAG/BE,GAAuB,IAAD,OACnC,OAAOA,EAAKC,MAAM,IACNC,QAAO,SAAAP,GAAC,OAAI,EAAKQ,QAAQR,MACzBS,KAAK,M,6CAKEC,GAAyB,IAAD,OAE3C,OADYA,EAAKJ,MAAM,KACVC,QAAO,SAAChB,EAAGC,GAAJ,OAAU,EAAKF,gBAAgBC,EAAGC,Q,iCAW/CmB,EAAaC,GACpB,MAAO,IAAIC,OAAOD,GAAOE,MAAMC,OAAOJ,GAAKK,QAAUL,M,MC0B9C,M,iDAhDXM,OAAiC,CAC7B,KAAM,IACN,KAAM,IACN,GAAM,IACN,GAAM,K,yDAVGC,GACT,MAAW,OAARA,EACUC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,IAAM,IAC5CC,KAAKL,OAAOC,K,yCAUJK,GACf,OAAOA,EAAKjB,MAAM,KACLC,QAAO,SAACJ,EAAGX,GAAJ,OAAUgC,EAAgBlC,gBAAgBa,EAAGX,MACpDU,KAAI,SAAAC,GAAC,OAAIA,EAAEG,MAAM,OACjBmB,OACAlB,QAAO,SAAAhB,GAAC,OAAIiC,EAAgBhB,QAAQjB,MACpCyB,S,oCAGHU,EAAiBH,GAC3B,IAAII,EAAYL,KAAKM,4BAA4BF,GAC7CG,GAAeP,KAAKQ,mBAAmBP,GAAQI,EAAUX,QAAU,EACvEa,GAA6BA,EAAc,EAC3C,IAAIE,EAAY,EAehB,OAdqBR,EAAKjB,MAAM,KAAKJ,KAAI,SAACG,EAAMb,GAC5C,OAAGgC,EAAgBlC,gBAAgBe,EAAMb,IAAMmC,EAAUX,OAAS,EAChDX,EAAKC,MAAM,IAAIJ,KAAI,SAAAF,GAC7B,OAAGwB,EAAgBhB,QAAQR,IAAM2B,EAAUX,OAAS,EAC7Ce,EAAYF,GACXE,GAAa,EACN/B,GAEJ2B,EAAUK,QACLhC,KAELS,KAAK,IACRJ,KAEEI,KAAK,O,kDAGHiB,GAA4B,IAAD,OAMpD,OALgBA,EAAQpB,MAAM,IACHJ,KAAI,SAAAF,GAAC,OAAIA,EAAEF,WAAW,MACtBI,KAAI,SAAA+B,GAAC,OAAIT,EAAgB5B,WAAWqC,EAAElC,SAAS,GAAI,MAClDG,KAAI,SAAA+B,GAAC,MAAI,CAACA,EAAE,GAAKA,EAAE,GAAIA,EAAE,GAAKA,EAAE,GAAIA,EAAE,GAAKA,EAAE,GAAIA,EAAE,GAAKA,EAAE,OAC1DR,OACXvB,KAAI,SAAAgC,GAAE,OAAI,EAAKjB,OAAOiB,U,MCxC/BC,EAR+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAeA,EAErD,oCACI,wCACA,+BAAQA,IAEZ,MCMaC,E,kDAEjB,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAQVC,kBAAoB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,OAAS,EAAKC,UAVhC,EAaxBC,oBAAsB,SAACN,GACnB,EAAKC,SAAS,CAAEM,cAAeP,EAAEG,OAAOC,OAAS,EAAKC,UAdlC,EAiBxBA,QAAU,WACN,IAAK,IAAD,EACuC,EAAKG,MAApCD,EADR,EACQA,cAAeL,EADvB,EACuBA,YACnBO,EAAeC,EAAeC,cAAcJ,EAAeL,GAC/D,EAAKJ,MAAMc,mBAAmBH,GAChC,MAAOb,GACL,EAAKK,SAAS,CACVL,MAAOA,MAtBf,EAAKY,MAAQ,CACTZ,MAAO,GACPW,cAAe,GACfL,YAAa,IALG,E,qDA6Bd,IAAD,EACyCpB,KAAK0B,MAA3CD,EADH,EACGA,cAAeL,EADlB,EACkBA,YAAaN,EAD/B,EAC+BA,MAC5Ba,EAAiB3B,KAAKgB,MAAtBW,aACR,OACI,yBAAKI,UAAU,UACX,iDACA,8BAAUA,UAAU,UAAUT,MAAOG,EAAeO,SAAUhC,KAAKwB,sBACnE,mDACA,8BAAUF,MAAOF,EAAaY,SAAUhC,KAAKiB,oBAC7C,gDACA,8BAAUK,MAAOK,IACjB,kBAAC,EAAD,CAAOb,MAAOA,S,GA1COmB,IAAMC,WCkB5B,M,iDAhCXvC,OAAiC,CAC7BzB,EAAG,EACHyC,EAAG,EACHwB,EAAG,EACHjB,EAAG,EACHkB,EAAG,G,mDAGA1D,GACH,OAAOsB,KAAKL,OAAOjB,K,oCAGTiD,GACV,IAAI1D,EAAIiC,EAAgBmC,uBAAuBV,GAC3CW,EAASpC,EAAgBqC,kBAAkBtE,GAE/C,OADY+B,KAAKwC,6BAA6BF,GACjCnD,KAAK,O,mDAGOsD,GAAsC,IAAD,OAK1DC,EAHaD,EAAgB7D,KAAI,SAAA0D,GAAM,OAAIA,EAAOtD,MAAM,OAC7BmB,OACCvB,KAAI,SAAAF,GAAC,OAAI,EAAKiE,OAAOjE,MACxBE,KAAI,SAAAgE,GAAC,OAAI1C,EAAgB5B,WAAWsE,EAAEnE,SAAS,GAAI,MAC5EoE,EAAWH,EAAW9D,KAAI,SAACX,EAAGC,GAAJ,OAAUA,EAAI,IAAM,EAAIwE,EAAWlD,MAAMtB,EAAGA,EAAI,GAAGiB,KAAK,IAAM,MAG5F,OAFA0D,EAAWA,EAAS5D,QAAO,SAAA6D,GAAC,MAAU,KAANA,MACPlE,KAAI,SAAAmE,GAAC,OAAItD,OAAOuD,aAAaC,SAASF,EAAG,W,MClBrDG,E,kDAEjB,WAAYlC,GAAa,IAAD,8BACpB,cAAMA,IAMVO,QAAU,SAACI,GACP,IACI,OAAOwB,EAAeC,cAAczB,GACtC,MAAOb,GAIL,OAHA,EAAKK,SAAS,CACVL,MAAOA,IAEJ,KAZX,EAAKY,MAAQ,CACTZ,MAAO,IAHS,E,qDAkBd,IACEA,EAAUd,KAAK0B,MAAfZ,MACAa,EAAiB3B,KAAKgB,MAAtBW,aACJF,EAAgBzB,KAAKuB,QAAQI,GACjC,OACI,yBAAKI,UAAU,UACX,2DACA,8BAAUT,MAAOK,IACjB,0DACA,8BAAUL,MAAOG,IACjB,kBAAC,EAAD,CAAOX,MAAOA,S,GA9BOmB,IAAMC,WCLtBmB,E,kDAEjB,WAAYrC,GAAa,IAAD,8BACpB,cAAMA,IAMVsC,mBAAqB,SAAC5E,GAClB,EAAKyC,SAAS,CAAEQ,aAAcjD,KAN9B,EAAKgD,MAAQ,CACTC,aAAc,IAHE,E,qDAWd,IACEA,EAAiB3B,KAAK0B,MAAtBC,aACR,OACI,oCACI,kBAAC,EAAD,CAASA,aAAcA,EAAcG,mBAAoB9B,KAAKsD,qBAC9D,kBAAC,EAAD,CAAS3B,aAAcA,S,GAlBEM,IAAMC,W,MCKhCqB,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCIcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACL2D,QAAQ3D,MAAMA,EAAMV,a","file":"static/js/main.1d074acc.chunk.js","sourcesContent":["class TextManipulator{\r\n\r\n    isVowel(c: string){\r\n        return c === \"a\" || c === \"e\" || c === \"i\" || c === \"o\" || c === \"u\";\r\n    }\r\n    \r\n    everyVowelInWords(words: string[]): string[] {\r\n        return words.map(w => this.everyVowelInWord(w));\r\n    }\r\n    \r\n    everyVowelInWord(word: string): string {\r\n        return word.split(\"\")\r\n                   .filter(c => this.isVowel(c))\r\n                   .join(\"\");\r\n    }\r\n\r\n    isImportantWord = (v: string, i: number): boolean => true\r\n\r\n    filterToImportantWords(text: string): string[] {\r\n        let words = text.split(' ');\r\n        return words.filter((v, i) => this.isImportantWord(v, i));\r\n    }\r\n    \r\n    stringToBinary = (str: string) =>\r\n        str.replace(/[\\s\\S]/g, str => this.addZeroPad(\r\n            this.convertUnicodeCharacterToBinary(str), 8\r\n        ) + \" \");\r\n\r\n    convertUnicodeCharacterToBinary = (str: string) => str.charCodeAt(0).toString(2)\r\n    \r\n\r\n    addZeroPad(num: string, count: number): string {\r\n        return \"0\".repeat(count).slice(String(num).length) + num;\r\n    }\r\n}\r\n\r\nexport default new TextManipulator();","import TextManipulator from \"./TextManipulator\";\r\n\r\nclass EncoderUtility {\r\n\r\n    randomLookUp(key: string){\r\n        if(key === \"01\")\r\n            return !!Math.floor(Math.random() * 2) ? 'o' : 'a'\r\n        return this.lookUp[key];\r\n    }\r\n    \r\n    lookUp: Record<string, string> = {\r\n        '00': 'i',\r\n        '01': 'o',\r\n        '10': 'e',\r\n        '11': 'u'\r\n    }\r\n\r\n    CountEncodingSpace(seed: string): number{\r\n        return seed.split(\" \")\r\n                    .filter((w, i) => TextManipulator.isImportantWord(w, i))\r\n                    .map(w => w.split(\"\"))\r\n                    .flat()\r\n                    .filter(v => TextManipulator.isVowel(v))\r\n                    .length;\r\n    }\r\n\r\n    EncodeMessage(message: string, seed: string): string{\r\n        let vowelList = this.convertMessageToVowelString(message);\r\n        let leftDataPad = (this.CountEncodingSpace(seed) - vowelList.length) / 2;\r\n        leftDataPad = leftDataPad - (leftDataPad % 4)\r\n        let skipCount = 0;\r\n        let encodedMessage = seed.split(\" \").map((word, i) => {\r\n            if(TextManipulator.isImportantWord(word, i) && vowelList.length > 0){\r\n                let newWord = word.split(\"\").map(c => {\r\n                    if(TextManipulator.isVowel(c) && vowelList.length > 0){\r\n                        if(skipCount < leftDataPad){\r\n                            skipCount += 1;\r\n                            return c;\r\n                        }\r\n                        return vowelList.shift();\r\n                    } else { return c; }\r\n                });\r\n                return newWord.join(\"\");\r\n            } else { return word; }\r\n        });\r\n        return encodedMessage.join(\" \");\r\n    }\r\n\r\n    convertMessageToVowelString(message: string): string[] {\r\n       let charArray = message.split(\"\");\r\n       let asciiArray = charArray.map(c => c.charCodeAt(0));\r\n       let byteArray = asciiArray.map(a => TextManipulator.addZeroPad(a.toString(2), 8));\r\n       let twoBitArray = byteArray.map(a => [a[0] + a[1], a[2] + a[3], a[4] + a[5], a[6] + a[7]])\r\n       let flatArray = twoBitArray.flat();\r\n       return flatArray.map(tb => this.lookUp[tb]);\r\n    }\r\n}\r\n\r\nexport default new EncoderUtility();","import React from 'react';\r\n\r\ntype Props = {\r\n    error: string\r\n}\r\n\r\nconst Error: React.FunctionComponent<Props> = ({ error }) => error ?\r\n    (\r\n        <>\r\n            <label>Error</label>\r\n            <label>{error}</label>\r\n        </>\r\n    ) : null\r\n\r\nexport default Error;","\r\nimport React from 'react';\r\nimport EncoderUtility from '../utils/EncoderUtility';\r\nimport Error from './Error';\r\n\r\ntype ChangeEvent = React.ChangeEvent<HTMLTextAreaElement>\r\n\r\ntype Props = {\r\n    codedMessage: string\r\n    changeCodeCallback: (c: string) => void\r\n}\r\n\r\ntype State = {\r\n    error: string\r\n    secretMessage: string\r\n    seededLorem: string\r\n}\r\n\r\nexport default class Encoder extends React.Component<Props, State> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            error: \"\",\r\n            secretMessage: \"\",\r\n            seededLorem: \"\"\r\n        }\r\n    }\r\n\r\n    updateSeededLorem = (e: ChangeEvent) => {\r\n        this.setState({ seededLorem: e.target.value }, this.convert)\r\n    }\r\n    \r\n    updateSecretMessage = (e: ChangeEvent) => {\r\n        this.setState({ secretMessage: e.target.value }, this.convert)\r\n    }\r\n\r\n    convert = () => {\r\n        try {\r\n            const { secretMessage, seededLorem } = this.state;\r\n            let codedMessage = EncoderUtility.EncodeMessage(secretMessage, seededLorem);\r\n            this.props.changeCodeCallback(codedMessage);\r\n        } catch (error) {\r\n            this.setState({\r\n                error: error\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { secretMessage, seededLorem, error } = this.state;\r\n        const { codedMessage } = this.props;\r\n        return (\r\n            <div className=\"encode\">\r\n                <label>Secret Message</label>\r\n                <textarea className=\"message\" value={secretMessage} onChange={this.updateSecretMessage}></textarea>\r\n                <label>Lorem Ipsum Seed</label>\r\n                <textarea value={seededLorem} onChange={this.updateSeededLorem}></textarea>\r\n                <label>Coded Message</label>\r\n                <textarea value={codedMessage}></textarea>\r\n                <Error error={error} />\r\n            </div>\r\n        );\r\n    }\r\n}","import TextManipulator from \"./TextManipulator\";\r\n\r\nclass DecoderUtility {\r\n\r\n    lookUp: Record<string, number> = {\r\n        i: 0,\r\n        a: 1,\r\n        o: 1,\r\n        e: 2,\r\n        u: 3\r\n    }\r\n\r\n    decode(c: string): number{\r\n        return this.lookUp[c];\r\n    }\r\n\r\n    DecodeMessage(codedMessage: string){\r\n        let v = TextManipulator.filterToImportantWords(codedMessage);\r\n        let vowels = TextManipulator.everyVowelInWords(v);\r\n        let ascii = this.ConvertVowelPairingsToBinary(vowels);\r\n        return ascii.join(\" \")\r\n    }\r\n\r\n    ConvertVowelPairingsToBinary(stringsOfVowels: string[]): string[] {\r\n        debugger;\r\n        let nestedList = stringsOfVowels.map(vowels => vowels.split(\"\"));\r\n        let flattenedList = nestedList.flat();\r\n        let encodedList = flattenedList.map(c => this.decode(c));\r\n        let twoBitList = encodedList.map(f => TextManipulator.addZeroPad(f.toString(2), 2));\r\n        let byteList = twoBitList.map((v, i) => i % 4 === 0 ? twoBitList.slice(i, i + 4).join(\"\") : \"\")\r\n        byteList = byteList.filter(s => s !== \"\");\r\n        let asciiList = byteList.map(b => String.fromCharCode(parseInt(b, 2)))\r\n        return asciiList;\r\n    }\r\n}\r\n\r\nexport default new DecoderUtility();","\r\nimport React from 'react';\r\nimport DecoderUtility from '../utils/DecoderUtility';\r\nimport Error from './Error';\r\n\r\ntype Props = {\r\n    codedMessage: string\r\n}\r\n\r\ntype State = {\r\n    error: string\r\n}\r\n\r\nexport default class Decoder extends React.Component<Props, State> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            error: \"\"\r\n        }\r\n    }\r\n\r\n    convert = (codedMessage: string): string => {\r\n        try {\r\n            return DecoderUtility.DecodeMessage(codedMessage);\r\n        } catch (error) {\r\n            this.setState({\r\n                error: error\r\n            });\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { error } = this.state;\r\n        const { codedMessage } = this.props;\r\n        let secretMessage = this.convert(codedMessage);\r\n        return (\r\n            <div className=\"decode\">\r\n                <label>Coded Message To Decrypt</label>\r\n                <textarea value={codedMessage}></textarea>\r\n                <label>Embedded Secret Message</label>\r\n                <textarea value={secretMessage}></textarea>\r\n                <Error error={error} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Encoder from './Encoder';\r\nimport Decoder from './Decoder';\r\n\r\ntype State = {\r\n    codedMessage: string\r\n}\r\n\r\nexport default class SecretLorem extends React.Component<{}, State> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            codedMessage: \"\"\r\n        }\r\n    }\r\n\r\n    updateCodedMessage = (c: string) => {\r\n        this.setState({ codedMessage: c });\r\n    }\r\n\r\n    render() {\r\n        const { codedMessage } = this.state;\r\n        return (\r\n            <>\r\n                <Encoder codedMessage={codedMessage} changeCodeCallback={this.updateCodedMessage} />\r\n                <Decoder codedMessage={codedMessage} />\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport SecretLorem from './components/SecretLorem';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SecretLorem /> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}